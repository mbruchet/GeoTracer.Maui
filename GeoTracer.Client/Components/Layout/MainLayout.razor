@using System.Security.Claims
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudThemeProvider></MudThemeProvider>
<MudDialogProvider></MudDialogProvider>
<MudSnackbarProvider></MudSnackbarProvider>

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudSpacer />
        <AuthorizeView>
            <Authorized>
                @if(!string.IsNullOrEmpty(userName))
                {
                    <MudAvatar Color="Color.Warning" Variant="Variant.Outlined">@userName.Substring(0, 2)</MudAvatar>
                }
            </Authorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer @bind-Open="@open" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">GeoTracer version @DateTime.Now.Year</MudText>
        </MudDrawerHeader>
        <NavMenu></NavMenu>
    </MudDrawer>
    <MudMainContent Class="pt-16 px-16">
        <MudContainer Class="mt-6">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool open = true;
    bool authenticate = false;
    string userName = "";

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        authenticate = authenticationState.User?.Identity?.IsAuthenticated ?? false;
        userName = authenticationState.User?.FindFirst(ClaimTypes.Name)?.Value ?? authenticationState.User?.Identity?.Name;
    }

    void ToggleDrawer()
    {
        open = !open;
    }
}